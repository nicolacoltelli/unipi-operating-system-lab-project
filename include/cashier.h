#ifndef CASHIER_H_
#define CASHIER_H_

#include <pthread.h>
#include <utils.h>

typedef struct __cashier{
  int id;
  pthread_t thread;
  queue_t* queue;
  int* status;
  pthread_mutex_t* status_mutex;
  pthread_cond_t* status_closed;
  struct __cashier_director_comm* queue_customers_count;  
}cashier_t;

struct __all_cashiers{
  cashier_t** cashiers_list;
  int count;
};

struct __cashier_args{
  int id;
  int fixed_service_time;
  int variable_service_time;
  queue_t* queue;
  int* status;
  pthread_mutex_t* status_mutex;
  pthread_cond_t* status_closed;
  struct __cashier_director_comm* queue_customers_count;
  int report_to_director_frequency;
  struct __customers_counter* customers_counter;
  struct __xlog* log;
  struct __xlog* supermarket_log;
  int* served_customers_count;
  int* bought_products_count;
};

struct __report_to_director_args{
  struct __cashier_director_comm* queue_customers_count;
  int frequency;
  queue_t* queue;
};

struct __cashier_director_comm{
  int count;
  pthread_mutex_t mutex;
  pthread_cond_t old_value;
};

struct __cashier_cleanup_args{
  struct __cashier_args* cashier_args;
  pthread_t* report_to_director_thread;
};

#define MIN_FIXED_SERVICE_TIME 20
#define MAX_FIXED_SERVICE_TIME 80

/*
 * \brief Dynamic initialization of a new cashier
 * \returns a cashier_t pointer, which will consist of only
 *                the essential elements that other functions
 *                will need (thread and fifo with mutual exclusion)
 * \param id: progressive and unique id assigned to thread.
 * \param initial_open_cashiers: config value, is used to establish wether
                   to be cashiers will start opened or closed.
 * \param variable_service_time: service time for each product the customer bought
 * \param log: log file where main events will be written by customer thread.
 * \param report_to_director_frequency: frequency expressed in millisecond with
 *                which the report_to_director_thread will update the director.
 * \param customers_counter: pointer to a struct containing an int representing
 *                the number of customers inside the supermarket at a certain
 *                time, the mutex to modify the counter and a condition variable
 *                to wait for when supermarket is full.
 * \param supermarket_seed: seed used inside rand_r, it's generated by the main
 *                since this function will be called by the main thread.
 * \param supermarket_log: main log file where the mandatory info will be written
 *                as specific.
 * \param served_customers_count: log variable requested as specifc.
 * \param bought_products_count: log variable requested as specifc.
 */
cashier_t* cashier_init(int id, int initial_open_cashiers, int variable_service_time, struct __xlog* log,
  int report_to_director_frequency, struct __customers_counter* customers_counter, unsigned int* supermarket_seed,
  struct __xlog* supermarket_log, int* served_customers_count, int* bought_products_count);

/*
 * \brief Joins the thread inside the cashier passed as param.
 * \param cashier: pointer to cashier to join.
 */
void cashier_join(cashier_t* cashier);


/*
 * \brief Cleans the customer thread arguments.
 * \param args: args initialized by init_cashier.
 */
void cashier_cleanup(void* args_pointer);

/*
 * \brief main cashier function. Can be stopped and restarted
 *                by the director.
 * \param args_pointer: args initialized by init_cashier.
 */
void* cashier(void* args_pointer);

/*
 * \brief auxiliar cashier function. Informs the director of the 
 *                number of customers in queue at regular time steps.
 * \param args_pointer: args initialized by main.
 */
void* report_to_director(void* args_pointer);

#endif
