#ifndef CUSTOMER_H_
#define CUSTOMER_H_

#include <pthread.h>
#include <fifo_unbounded.h>
#include <time.h>
#include <utils.h>

typedef struct __customer{
  int id;
  pthread_t thread;
}customer_t;

struct __customers_counter{
  int* count;
  pthread_mutex_t* mutex;
  pthread_cond_t* full;
};

struct __customer_args{
  int id;
  int time_to_shop;
  int products_count;
  struct __all_cashiers* all_cashiers;
  struct __customers_counter* customers_counter;
  queue_t* director_permissions_list;
  struct __xlog* log;
  struct __xlog* supermarket_log;
};

struct __permission_request{
  int* status;
  pthread_mutex_t* mutex;
  pthread_cond_t* no_permission;
  struct timespec* time_permission_received;
};

struct __customer_at_cashier{
  int id;
  int products_count;
  int* response;
  pthread_mutex_t* response_mutex;
  pthread_cond_t* no_response;
  struct timespec* time_queue_out;
};

#define MIN_FIXED_TIME_TO_SHOP 10

/*
 * \brief Dynamic initialization of a new customer
 * \returns a customer_t pointer, which will consist of only
 *                the essential elements that other functions
 *                will need (only the thread).
 * \param id: progressive and unique id assigned to thread.
 * \param all_cashiers: pointer to a struct containing all the informations
 *                about the cashiers.
 * \param customers_counter: pointer to a struct containing an int representing
 *                the number of customers inside the supermarket at a certain
 *                time, the mutex to modify the counter and a condition variable
 *                to wait for when supermarket is full.
 * \param director_permissions_list: unbounded fifo where the customers will
 *                queue their permissions request if they have 0 products.
 * \param log: log file where main events will be written by customer thread.
 * \param max_fixed_time_to_shop: maximum time a customer can spend
 *                shopping in the supermarket, expressed in milliseconds.
 * \param max_fixed_products_count: maximum number of products a customer
 *                can buy.
 * \param supermarket_seed: seed used inside rand_r, it's generated by the main
 *                since this function will be called by the main thread.
 * \param supermarket_log: main log file where the mandatory info will be written
 *                as specific.
 */
customer_t* customer_init(int id, struct __all_cashiers* all_cashiers,
           struct __customers_counter* customers_counter, queue_t* director_permissions_list,
           struct __xlog* log, int max_fixed_time_to_shop, int max_fixed_products_count,
           unsigned int* supermarket_seed, struct __xlog* supermarket_log);

/*
 * \brief Cleans the customer thread arguments and signals
 *                that the customer exited the supermarket.
 * \param args_pointer: args initialized by init_customer.
 */
void customer_cleanup(void* args_pointer);

/*
 * \brief main customer function. Will shop for T seconds and
 *                then go pay to a cashier.
 * \param args_pointer: args initialized by init_customer.
 */
void* customer(void* args_pointer);

#endif
